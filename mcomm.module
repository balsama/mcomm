<?php
/**
 * Checks to see if we should be displaying mcomm blocks or not and sets and
 * deletes the appropriate $_COOKIE variables accordingly.
 *
 * @return bool/mixed
 *   - TRUE if we should currently be displaying mcomm blocks
 *   - FALSE if not
 *   - Non bool zero if `commset` URL param or session is present but it is
 *     invalid.
 */
function mcomm_display_blocks() {
  if ((arg(0) == 'admin') && (arg(1) == 'build') && (arg(2) == 'block')) {
    return TRUE;
  }
  if (isset($_GET['commset'])) {
    if (mcomm_is_valid_commset($_GET['commset'])) {
      setcookie('commset', $_GET['commset'], 0, base_path());
      return TRUE;
    }
    else {
      watchdog('mcomm', 'Invalid CommSet "@commset" requested in URL param.', array('@commset' => $_GET['commset']));
      return 0;
    }
  }
  elseif (isset($_COOKIE['commset'])) {
    if (mcomm_is_valid_commset($_COOKIE['commset'])) {
      return TRUE;
    }
    else {
      setcookie('commset', '', -1, base_path());
      watchdog('mcomm', 'Invalid Commset "@commset" in COOKIE. This is usually indicative of a recent CommSet definition update.', array('@commset' => $_GET['commset']));
      return 0;
    }
  }
  return FALSE;
}

/**
 * Determines if a given CommSet ID is valid.
 *
 * @return bool
 *   TRUE if provided Communication Set ID is entered in our system and has a
 *   definition. False if not.
 */
function mcomm_is_valid_commset($csid) {
  $commsets = mcomm_get_db_commset_definitions();
  if (isset($commsets[$csid])) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_menu()
 */
function mcomm_menu() {
  $items['admin/settings/mcomm'] = array(
    'title' => 'Mandatory Communications',
    'description' => 'View CommSet status and import new configurations.',
    'page callback' => 'mcomm_admin',
    'access arguments' => array('administer mcomm'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'mcomm.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_perm().
 */
function mcomm_perm() {
  return array('administer mcomm');
}

/**
 * Reads the commsets/commsets.inc file and updates the `mcomm_commsets`
 * varible with the contents - overwriting anything that was previously in the
 * `commsets` var.
 */
function mcomm_update_commset_definitions() {
  if ($definitions = mcomm_get_file_commset_definitions()) {
    variable_set('mcomm_commsets', $definitions);
    drupal_set_message('CommSet Definitions have been updated based on the contents of the `commsets.inc` file.');
  }
}

/**
 * @return array
 *   Array containing the commset definitions in the file.
 */
function mcomm_get_file_commset_definitions() {
  include(drupal_get_path('module', 'mcomm') . '/commsets/commsets.inc');
  // Very general error checking. A serious syntax error is still possible and
  // would result in a 500.
  if (is_array($commsets)) {
    return $commsets;
  }
  drupal_set_message('You have a syntax error in the `commsets.inc` file. Please fix the errors and try again.');
  return FALSE;
}

/**
 * @return array
 *   Array containing the curently loaded commset definitions
 */
function mcomm_get_db_commset_definitions() {
  return variable_get('mcomm_commsets', null);
}

/**
 * Get a specific commset definition.
 *
 * @return array
 *   Array containing the specific commset for the current user or commset
 *   passed as param. Will return false if the current user shouldn't have a
 *   commset displayed or an invalid commset is provided as a param, but
 *   normally, this shouldn't be called in that situation.
 */
function mcomm_get_commset($commset = FALSE) {
  if ($commset) {
    if (mcomm_is_valid_commset($commset)) {
      $commsets = mcomm_get_db_commset_definitions();
      return $commsets[$commset];
    }
    else {
      watchdog('mcomm', 'Invalid CommSet passed as argument to mcomm_get_commset(): "@commset".', array('@commset' => $commset));
      return FALSE;
    }
  }
  else {
    if (isset($_GET['commset'])) {
      if (mcomm_is_valid_commset($_GET['commset'])) {
        $commsets = mcomm_get_db_commset_definitions();
        return $commsets[$_GET['commset']];
      }
      watchdog('mcomm', 'Invalid CommSet "@commset" requested in URL param.', array('@commset' => $_GET['commset']));
      return FALSE;
    }
    elseif (isset($_COOKIE['commset'])) {
      if (mcomm_is_valid_commset($_COOKIE['commset'])) {
        $commsets = mcomm_get_db_commset_definitions();
        return $commsets[$_COOKIE['commset']];
      }
      else {
        watchdog('mcomm', 'Invalid CommSet "@commset" stored in user cookie.', array('@commset' => $_COOKIE['commset']));
        return FALSE;
      }
    }
  }
  return FALSE;
}

/**
 * Implements hook_block().
 *
 * This generates five blocks:
 *   - Alert 1: the "alert" shown in the sidebar that links back to the
 *     landing page (landing page nid is configured on this module's admin
 *     page). Displayed on all pages.
 *   - Alert 2: identical to Alert 1. Displayed in content_bottom on all
 *     article and offer nodes.
 *   - Tab: The pseudo menu item that links back to the landing page.
 *   - MC (Mandatory Communications): Displays links to the Mandatory
 *     Communications areticles defined in the commset. Displayed on all
 *     article and offer pages.
 *   - Pic: That stupid picture of the family on the landing page.
 *   - SM (Social Media): Identical to the block provided by the varblock
 *     module except it accepts variables for the link URLs.
 *
 * In addition to the normal core visibility rules configured here, these
 * blocks are only available if mcomm_show_blocks() returns TRUE.
 */
function mcomm_block($op = 'list', $delta = 0, $edit = array()) {
  if (mcomm_display_blocks()) {
    if ($op == "list") {
      $block['mcomm_alert_1'] = array(
        'info' => 'MComm Alert 1',
        'region' => 'sidebar',
        'status' => 1,
        'visibility' => 0,
        'weight' => -21,
      );

      $block['mcomm_alert_2'] = array(
        'info' => 'MComm Alert 2',
        'region' => 'content_bottom',
        'visibility' => 2,
        'pages' => '
<?php
if ((is_numeric(arg(1))) && (arg(0) == "node")) {
  $node = menu_get_object();
  if (($node->type == "article") || ($node->type == "offer")) {
    return TRUE;
  }
}
return FALSE;
?>
        ',
        'status' => 1,
      );

      $block['mcomm_tab'] = array(
        'info' => 'MComm Tab',
        'region' => 'menus',
        'status' => 1,
        'visibility' => 0,
      );

      $block['mcomm_mc'] = array(
        'info' => 'MComm Mandatory Communications',
        'visibility' => 2,
        'pages' => '
<?php
if ((is_numeric(arg(1))) && (arg(0) == "node")) {
  $node = menu_get_object();
  if (($node->type == "article") || ($node->type == "offer")) {
    return TRUE;
  }
}
return FALSE;
?>
        ',
        'region' => 'content_top',
        'status' => 1,
      );

      $block['mcomm_pic'] = array(
        'info' => 'MComm Pic',
        'region' => 'sidebar',
        'status' => 1,
        'visibility' => 2,
        'pages' => '
<?php
if (arg(1) == variable_get("mcomm_lp_nid", 100)) {
  return TRUE;
}
return FALSE;
?>
        ',
        'weight' => -22,
      );

      $block['mcomm_sm'] = array(
        'info' => 'MComm Social Media',
        'region' => 'sidebar',
        'status' => 1,
        'visibility' => 0,
        'weight' => -20,
      );

      return $block;
    }

    elseif ($op == "view") {
      drupal_add_css(drupal_get_path('module', 'mcomm') . '/mcomm.css');
      switch ($delta) :
        case 'mcomm_alert_1' :
        case 'mcomm_alert_2' :
          $block['content'] = theme('mcomm_alert');
          break;

        case 'mcomm_tab' :
          $block['content'] = theme('mcomm_tab');
          break;

        case 'mcomm_mc' :
          drupal_add_js(drupal_get_path('module', 'mcomm') . '/mcomm.js', 'module', 'footer');
          $block['content'] = theme('mcomm_mc', mcomm_get_commset(), variable_get('mcomm_lp_nid', 100));
          break;

        case 'mcomm_pic' :
          $block['content'] = 'Picture of a family on a dock (replaced in a cutsom template file)';
          break;

        case 'mcomm_sm' :
          $block['content'] = theme('mcomm_sm', mcomm_get_commset());
          break;

      endswitch;

      return $block;
    }
  }
}

/**
 * Implements hook_theme()
 */
function mcomm_theme() {
  $lp_nid = variable_get('mcomm_lp_nid', 100);
  return array(
    'mcomm_alert' => array(
      'arguments' => array('lp_nid' => $lp_nid),
      'template' => 'templates/mcomm-alert',
    ),
    'mcomm_tab' => array(
      'arguments' => array('lp_nid' => $lp_nid),
      'template' => 'templates/mcomm-tab',
    ),
    'mcomm_mc' => array(
      'arguments' => array('commset' => null, 'lp_nid' => null),
      'template' => 'templates/mcomm-mc',
    ),
    'mcomm_sm' => array(
      'arguments' => array('commset' => null),
      'template' => 'templates/mcomm-sm',
    ),
  );
}

/**
 * Implements MODULE_preprocess_HOOK()
 *
 * Provides the commset array (if set) to MComm nodes
 */
function mcomm_preprocess_node(&$vars) {
  $node = menu_get_object();
  if ($node->type == 'mcomm_lp') {
    $vars['commset'] = mcomm_get_commset();
  }
}

